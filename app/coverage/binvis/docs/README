# VDB2JSON - VDB Coverage Dumper

A specialized tool for dumping VDB functional coverage data to JSON format. Extracts SystemVerilog covergroup definitions, instances, and coverage information from VCS VDB files.

## Directory Structure

```
vdb2json/
├── src/                    # Source code
│   ├── vdb2json.cc        # Main VDB coverage dumper (JSON output)
│   ├── visit.cc           # UCAPI visitor implementation
│   └── visit.hh           # Visitor header
├── examples/              # Example SystemVerilog designs
│   ├── covergroup_showcase.sv
│   └── jukebox.v
├── tests/                 # Test files and utilities
│   ├── test_rapidjson.cpp
│   └── test_simple
├── docs/                  # Documentation
│   └── README
├── build/                 # Build artifacts (generated)
└── Makefile              # Modern build system
```

## Features

- **VDB Dumping**: Extracts functional coverage data from VCS VDB files
- **JSON Output**: Structured JSON format for easy integration with other tools
- **Covergroup Support**: Comprehensive support for SystemVerilog covergroups
- **Cross Coverage**: Support for cross coverage analysis
- **Transition Coverage**: State transition coverage analysis
- **Conditional Coverage**: Conditional coverage analysis
- **Hit Counts**: Detailed hit count information for each bin
- **Modern Build System**: Clean, organized Makefile with helpful targets
- **Focused Tool**: Specialized tool for VDB coverage data extraction

## Workflow

The tool follows a **PRE-VDB → POST-VDB** workflow:

- **PRE-VDB**: Build tools + Run simulation → Create VDB file
- **POST-VDB**: Analyze VDB → Generate JSON output

## Quick Start

1. **Show help and configuration**:
   ```bash
   make help
   make config
   ```

2. **Complete workflow with example**:
   ```bash
   make DESIGN_FILE=examples/covergroup_showcase.sv json
   ```

3. **Use existing VDB file**:
   ```bash
   make VDB_FILE=/path/to/existing/simv.vdb json-from-vdb
   ```

## Available Targets

- `make help` - Show help message with usage examples
- `make config` - Show current configuration (paths, platform, etc.)
- `make build` - Build binvis_cpp executable (PRE-VDB)
- `make sim` - Compile and run simulation to create VDB (PRE-VDB)
- `make json` - Complete workflow: build + sim + analysis (PRE-VDB + POST-VDB)
- `make json-from-vdb` - Generate JSON from existing VDB file (POST-VDB only)
- `make clean` - Clean all build and simulation artifacts

## Examples

### Basic Usage
```bash
# Complete workflow with covergroup showcase
make DESIGN_FILE=examples/covergroup_showcase.sv json

# Complete workflow with jukebox example
make DESIGN_FILE=examples/jukebox.v json

# Use existing VDB file
make VDB_FILE=../other_project/build/simv.vdb json-from-vdb
```

### Step-by-Step Usage
```bash
# 1. Build the analysis tool
make build

# 2. Run simulation to create VDB
make DESIGN_FILE=examples/covergroup_showcase.sv sim

# 3. Generate JSON from VDB
make VDB_FILE=build/simv.vdb json-from-vdb
```

### Configuration and Debugging
```bash
# Show current configuration
make config

# Show help with all options
make help

# Clean build artifacts
make clean
```

## Output Format

### JSON Output (vdb2json)
Structured JSON format with detailed VDB coverage information:
- **Instance information**: Module and instance details
- **Covergroup variants**: Different covergroup instantiations
- **Coverpoint details**: Individual coverpoint information
- **Bin information**: Hit counts and coverage status for each bin
- **Cross coverage data**: Cross coverage relationships and statistics
- **Coverage statistics**: Overall coverage percentages and metrics

The JSON output is written to `build/coverage_output.json` and can be easily integrated with other analysis tools or web interfaces.

## Requirements

- **VCS (Synopsys)**: For SystemVerilog compilation and simulation
- **UCAPI library**: VCS coverage API library
- **C++ compiler**: With C++11 support (g++ recommended)
- **RapidJSON library**: For JSON output generation

## Troubleshooting

1. **VCS not found**: 
   - Ensure `VCS_HOME` environment variable is set correctly
   - Verify VCS is in your PATH

2. **Library not found**: 
   - Check UCAPI library path in Makefile
   - Verify `$(VCS_HOME)/lib/libucapi.so` exists

3. **Compilation errors**: 
   - Verify C++11 support: `g++ --version`
   - Check RapidJSON installation
   - Run `make config` to see current configuration

4. **Design file not found**:
   - Use absolute or relative paths: `make DESIGN_FILE=examples/jukebox.v json`
   - Check file exists: `ls -la examples/`

5. **VDB file not found**:
   - Ensure simulation completed successfully
   - Check VDB path: `ls -la build/simv.vdb`

## Recent Changes

- **Renamed to VDB2JSON**: More accurate name that clearly indicates VDB to JSON conversion
- **Streamlined codebase**: Removed legacy binvis.cc and Makefile.full
- **Focused purpose**: Specialized tool for dumping VDB functional coverage data
- **Modernized Makefile**: Clean, organized build system with helpful targets
- **Improved workflow**: Clear PRE-VDB → POST-VDB separation
- **Enhanced error handling**: Better validation and user guidance
- **Configuration display**: `make config` shows current settings
- **Flexible VDB usage**: Support for existing VDB files
- **Better documentation**: Comprehensive README with examples